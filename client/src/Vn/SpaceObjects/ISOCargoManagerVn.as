package Vn.SpaceObjects {
//-----------------------------------------------------------------------------------------------------
// Менеджер грузов на планете
//-----------------------------------------------------------------------------------------------------
	import Vn.Cargo.CargoManagerVn;
	import Vn.Cargo.CargoVn;
	import Vn.SpaceObjects.InteractiveSpaceObjectRC;
//-----------------------------------------------------------------------------------------------------
	public class ISOCargoManagerVn extends CargoManagerVn {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function ISOCargoManagerVn(vOwner:InteractiveSpaceObjectRC) {
			// Конструктор родителя
			super(vOwner);
			// Конструктор
			Script = "getplanetindustry.php";
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			
			// Деструктор родителя
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		override protected function CreateListFromXML(Data:XML):void {
			// Создание списка по полученным XML-данным
			for each (var Node:XML in Data.*) {
				if (Node.nodeKind() == "element") {
					var NewCargo:CargoVn = new CargoVn();
					NewCargo.Id = uint(Node.attribute("id"));
					NewCargo.industryId = uint(Node.child("industry_id"));
					NewCargo.Type = uint(Node.child("type"));
					NewCargo.Volume = uint(Node.child("current_value"));
					NewCargo.Price = uint(Node.child("price"));
					Add(NewCargo);
				}
			}
		}
//-----------------------------------------------------------------------------------------------------
		override protected function SetScriptParams():void {
			// Добавление загрузочных параметров в загрузчик
			AddScriptParam("PlanetId", String(InteractiveSpaceObjectRC(Owner).SpaceObjectId));
		}
//-----------------------------------------------------------------------------------------------------
		public function byIndustryId(vIndustryId:uint):Object {
			// Возвратить указатель на объект по его industryId
			// Имеет смысл только для ISOCargoManager т.к. у кораблей может быть несколько одинаковых грузов с разных планет
			// а на планете не может быть двух одинаковых грузов
			for each(var currentCargo:Object in All) {
				if (CargoVn(currentCargo).industryId == vIndustryId) {
					return currentCargo;
					break;
				}
			}
			return null;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------
	}
}