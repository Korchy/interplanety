package Vn.SpaceObjects {
//-----------------------------------------------------------------------------------------------------
// Реальный космический объект
//-----------------------------------------------------------------------------------------------------
	import Vn.Math.Vector2;
	import Vn.SpaceObjects.Orbit.OrbitR;
	import Vn.Synchronize.ServerTime;
//-----------------------------------------------------------------------------------------------------
	public class InteractiveSpaceObjectR extends InteractiveSpaceObject {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		protected var l_RealScaleK:uint;	// Коэффициент реального удаления объекта от центра
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function InteractiveSpaceObjectR() {
			// Конструктор предка
			super();
			// Конструктор
			l_RealScaleK = 1;
			}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			
			// Деструктор предка
			super._delete();
			}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		override public function LoadFromXML(Data:XML):void {
			// Заполнение данными из XML
			// Общие данные
			super.LoadFromXML(Data);
			// Конкретные данные
			if(Data.child("k_real").length()>0) l_RealScaleK = Number(Data.child("k_real"));
		}
//-----------------------------------------------------------------------------------------------------
		public function CountRealPos(Time:Number=0.0):Vector2 {
			// Получить реальное положение объекта в момент времени Time
			// Если параметр 0 или отсутствует - в текущий момент времени
			if (Time == 0.0) Time = ServerTime.Time;
			var RealPos:Vector2 = new Vector2();
			if (Trace != null) {
				// Если объект вращается по орбите
				RealPos = OrbitR(Trace).CountRealPos(Time);
			}
			else {
				// Стационарный объект
				RealPos.X = l_X * l_RealScaleK;
				RealPos.Y = l_Y * l_RealScaleK;
			}
			return RealPos;
		}
//-----------------------------------------------------------------------------------------------------
		public function CountMROffset():Number {
			// Возвращает смещение объекта относительно центра (вычисляется по сумме средних радиусов)
			var Offset:Number = 0.0;
			if (Trace != null) {
				// Если объект вращается по орбите
				Offset = OrbitR(Trace).CountMROffset();
			}
			else {
				// Стационарный объект
				var RealPos:Vector2 = CountRealPos();
				Offset = RealPos.Vec2Length();
			}
			return Offset;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
	}
}