package Vn.Math {
	// Класс двухмерный вектор
	// Значения x,y округляются до 0.05 из-за "твипса" (Положение пиксела на экране указывается с точностью до 0.05 (1/20))
//-----------------------------------------------------------------------------------------------------
	import flash.geom.Point;
	import flash.geom.Matrix;
	import Vn.Common.Common;
//-----------------------------------------------------------------------------------------------------
	public class Vector2 extends Point {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function Vector2(NewX:Number=0.0,NewY:Number=0.0) {
			super(Common.Round005(NewX),Common.Round005(NewY));
//			super(NewX,NewY);
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		public function _delete():void {
			
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		public function Vec2Length():Number {
			// Длина
			return length;
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Add(Vin1:Vector2,Vin2:Vector2,Vout:Vector2):void {
			// Сумма
			Vout.X = Vin1.X+Vin2.X;
			Vout.Y = Vin1.Y+Vin2.Y;
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Subtract(Vin1:Vector2,Vin2:Vector2,Vout:Vector2):void {
			// Вектор Vin2 минус вектор Vin1. Разность = вектору направленному из Vin1 в Vin2
			var V1:Vector2 = Vin1.Vec2Clone();
			var V2:Vector2 = Vin2.Vec2Clone();
			var Sub:Point = V2.subtract(V1);
			Vout.X = Sub.x;
			Vout.Y = Sub.y;
		}
//-----------------------------------------------------------------------------------------------------
		public function Vec2Mult(Value:Number):void {
			// Умножение вектора на число Value
			normalize(length*Value);
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Dot(Vin1:Vector2,Vin2:Vector2):Number {
			// Скалярное произведение
			return Vin1.X*Vin2.X+Vin1.Y*Vin2.Y;
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2TransformCoord(Vin:Vector2,Min:Matrix,Vout:Vector2):void {
			// Произведение вектора на матрицу
			var P:Point = Min.transformPoint(Point(Vin));
			Vout.X = P.x;
			Vout.Y = P.y;
//			// Почему-то неправильно работает математическая реализация (умножение матрицы 3х3 на вектор 3х1 (у 2д вектора последний элемент = 1))
//			Vout.X = Min.a*Vin.X + Min.b*Vin.Y + Min.tx;
//			Vout.Y = Min.c*Vin.X + Min.d*Vin.Y + Min.ty;
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Normalize(Vin:Vector2,Vout:Vector2):void {
			// Получить нормализованный вектор из заданного
			Vout.X = Vin.X/Vec2Abs(Vin);
			Vout.Y = Vin.Y/Vec2Abs(Vin);
		}
//-----------------------------------------------------------------------------------------------------
		public function Vec2Normalize():void {
			// Нормализация текущего вектора (Орта)
			normalize(1.0);
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Normal(Vin:Vector2,Vout:Vector2):void {
			// Получить нормаль (перпендикуляр) Vout к вектору Vin
			// Нормаль берется против часовой стрелки
			Vout.X = -Vin.Y;
			Vout.Y = Vin.X;
			Vout.Vec2Normalize();
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Alpha(Vin1:Vector2,Vin2:Vector2):Number {
			// Угол между векторами
			var Vin1N:Vector2;
			Vec2Normalize(Vin1,Vin1N);
			var Vin2N:Vector2;
			Vec2Normalize(Vin2,Vin2N);
			return Math.acos(Vec2Dot(Vin1N,Vin2N))
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Abs(Vin:Vector2):Number {
			// Модуль
			return Math.sqrt(Vin.X*Vin.X+Vin.Y*Vin.Y);
		}
//-----------------------------------------------------------------------------------------------------
		public static function Vec2Round(Vin:Vector2):Vector2 {
			// Округление до целых чисел
			var Vout:Vector2 = new Vector2(Math.round(Vin.X),Math.round(Vin.Y))
			return Vout;
		}
//-----------------------------------------------------------------------------------------------------
		public function Vec2Round():void {
			// Округление до целых чисел
			x = Math.round(X);
			y = Math.round(Y);
		}
//-----------------------------------------------------------------------------------------------------
		public function Vec2Revers():void {
			// Обращает вектор в обратном направлении
			X = -X;
			Y = -Y;
		}
//-----------------------------------------------------------------------------------------------------
		public function Vec2Clone():Vector2 {
			// Создает копию данного вектора и возвращает указатель на нее
			var Vout:Vector2 = new Vector2();
			Vout.X = X;
			Vout.Y = Y;
			return Vout;
		}
//-----------------------------------------------------------------------------------------------------
		override public function toString():String {
			// Возвращает информацию о векторе в текстовом виде
			return "[ X = "+String(X)+" Y = "+String(Y)+" ]";
		}
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function get X():Number {
			return x;
		}
//-----------------------------------------------------------------------------------------------------
		public function set X(Value:Number):void {
			x = Common.Round005(Value);
		}
//-----------------------------------------------------------------------------------------------------
		public function get Y():Number {
			return y;
		}
//-----------------------------------------------------------------------------------------------------
		public function set Y(Value:Number):void {
			y = Common.Round005(Value);
		}
//-----------------------------------------------------------------------------------------------------
	}
}