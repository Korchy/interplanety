package Vn.Objects {
	// Класс "объект ведомый" - следует за каким-то другим объектом, хотя и не является его чайлдом
//-----------------------------------------------------------------------------------------------------
	import Vn.Math.Vector2;
//-----------------------------------------------------------------------------------------------------
	public class VnObjectF extends VnObjectT {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var lLeader:VnObjectT;	// Указатель на объект за которым следует текущий объект
		private var lNeedPlace:Boolean;	// true - объект необходимо поместить в определенное место, false - объект не перемещается
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function VnObjectF() {
			// Конструктор предка
			super();
			// Конструктор
			Leader = null;
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			Leader = null;
			NeedPlace = false;	// По-умолчанию не выравниваем объект
			// Деструктор предка
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		protected function GetPlace():Vector2 {
			// Получить положение объекта для его последующего позиционирования (для MoveIntoParent)
			return Leader.GetPosition();
		}
//-----------------------------------------------------------------------------------------------------
		public function RePlace(NewPlace:Vector2 = null):void {
			// Переместить объект в новую точку
			// Координаты получаем из GetPlace()
			if(NeedPlace==true) {
				if (NewPlace==null) {
					var PlaceTo:Vector2 = GetPlace();
					MoveIntoParent(PlaceTo.X, PlaceTo.Y, true);
				}
				else MoveIntoParent(NewPlace.X, NewPlace.Y, true);
			}
		}
//-----------------------------------------------------------------------------------------------------
		public function FollowLeader():void {
			// Переместиться в указанное место относительно лидера
			if (Leader != null) RePlace();
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function get Leader():VnObjectT {
			return lLeader;
		}
//-----------------------------------------------------------------------------------------------------
		public function set Leader(Value:VnObjectT):void {
			lLeader = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function get NeedPlace():Boolean {
			return lNeedPlace;
		}
//-----------------------------------------------------------------------------------------------------
		public function set NeedPlace(Value:Boolean):void {
			lNeedPlace = Value;
		}
//-----------------------------------------------------------------------------------------------------
	}
}