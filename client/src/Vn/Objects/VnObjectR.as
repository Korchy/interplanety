package Vn.Objects {
//-----------------------------------------------------------------------------------------------------
// Класс объектов с выводом на экран
// Здесь же контролируется drag объекта
//	Чтобы контролировался drag, нужно в обрабочкиках OnMouseUp, OnMouseDown и OnClick вызывть функции DragController - MouseDown,MouseUp,Click
//	тогда через свойства Dragged и Dragging можно следить за сотоянием перетаскивания
//-----------------------------------------------------------------------------------------------------
	import flash.events.Event;
	import Vn.Math.Vector2;
	import Vn.Scene.StarSystem.StarSystemVn;
	import Vn.System.DragController;
//-----------------------------------------------------------------------------------------------------
	public class VnObjectR extends VnObjectF {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var lVisible:Boolean;	// Отображаемость
		private var lDragCont:DragController;	// Контроллер за перемещениями
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function VnObjectR() {
			// Конструктор предка
			super();
			// Конструктор
			Rendered = true;
			lDragCont = new DragController();
			// Регистрация событий добавления/удаления из списка отображения
			addEventListener(Event.ADDED_TO_STAGE,OnAddToStage);
			addEventListener(Event.REMOVED_FROM_STAGE,OnRemoveFromStage);
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			lDragCont._delete();
			lDragCont = null;
			// Удалить обработку событий добавления/удаления из списка отображения
			removeEventListener(Event.ADDED_TO_STAGE,OnAddToStage);
			removeEventListener(Event.REMOVED_FROM_STAGE,OnRemoveFromStage);
			// Деструктор предка
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		override protected function GetPlace():Vector2 {
			// Возвращает местоположение объекта
			// Относительно parent - для MoveIntoParent
			if(parent!=null) {
				// Если добавлен в список отображения - по центру парента
//if(SpaceObjectId == 7) trace("place");
				return new Vector2(VnObjectT(parent).GetLocalPosition().X,VnObjectT(parent).GetLocalPosition().Y);
			}
			else {
				// Если не добавлен - 0,0
				return new Vector2(0.0,0.0);
			}
		}
//-----------------------------------------------------------------------------------------------------
		public function IsIntoScene():Boolean {
			// Проверка, относится ли данный объект к контейнеру сцены (true) или нет (false)
			if(stage!=null) {
				// Если добавлен в список отображения - проверяем до корня, есть ли сцена
				var Par:Object = parent;
				while(Par!=null) {
					if(Par is StarSystemVn) return true;
					Par = Par.parent;
				}
				return false;
			}
			// Если не добавлен - false
			return false;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		protected function OnAddToStage(e:Event):void {
			// При добавлении в список отображения
			// Выровнять центр объекта по центру того объекта, к которому добавляем
			RePlace();
		}
//-----------------------------------------------------------------------------------------------------
		protected function OnRemoveFromStage(e:Event):void {
			// При удалении из списка отображения
			
		}
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function set Rendered(Value:Boolean):void {
			lVisible = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function get Rendered():Boolean {
			return lVisible;
		}
//-----------------------------------------------------------------------------------------------------
		public function get Visible():Boolean {	// Показ/сокрытие на экране
			return visible;
		}
//-----------------------------------------------------------------------------------------------------
		public function set Visible(Value:Boolean):void {
			visible = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function get DragCont():DragController {	// Указатель но контроллер drag
			return lDragCont;
		}
//-----------------------------------------------------------------------------------------------------
	}
}