package Vn.Interface.Text {
//-----------------------------------------------------------------------------------------------------
// Текстовая строка с картинкой перед ней
//-----------------------------------------------------------------------------------------------------
	import Vn.Objects.VnObjectR;
	import Vn.Objects.VnObjectS;
//-----------------------------------------------------------------------------------------------------
	public class VnTextI extends VnObjectR {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var Txt:VnText;				// Текст
		private var Img:VnObjectS;			// Картинка
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function VnTextI(NewWidth:uint=100,NewHeight:uint=20) {
			// Конструктор предка
			super();
			// Конструктор
			// Картинка
			Img = new VnObjectS();
			Img.SetLocalPosition(NewHeight/2,NewHeight/2);	// Рисунок квадратный ширина берется из высоты
			addChild(Img);
			// Текст
			Txt = new VnText();
			addChild(Txt);
			Txt.Align = VnText.NONE;
			Txt.x = Img.Width;
			Txt.width = NewWidth-Img.Width;	// NewWidth - ширина картинки (16x16)
			Txt.height = Img.Height;
			Border = false;
			// Общие размеры
			SetLocalPosition(NewWidth/2,Img.Height05);
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			// Картинка
			removeChild(Img);
			Img._delete();
			Img = null;
			// Текст
			removeChild(Txt);
			Txt._delete();
			Txt = null;
			// Деструктор предка
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		public function ReLoadById(NewId:uint):void {
			Img.ReLoadById(NewId);
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function set Width(Value:uint):void {
			SetLocalPosition(Value/2,Img.Height05);
			Txt.width = Value-Img.Width;
		}
//-----------------------------------------------------------------------------------------------------
		public function set Height(Value:uint):void {
			SetLocalPosition(Width05,Value/2);
			Txt.height = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function set Text(Value:String):void {
			Txt.Text = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function set HtmlText(Value:String):void {
			Txt.HtmlText = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function set TextSize(Value:uint):void {
			Txt.FontSize = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function set TextColor(Value:uint):void {
			Txt.textColor = Value;	// Цвет текста
		}
//-----------------------------------------------------------------------------------------------------
		public function set TextAlign(Value:uint):void {
			Txt.TextAlign = Value;	// Выравнивание текста
		}
//-----------------------------------------------------------------------------------------------------
		public function set Border(Value:Boolean):void {
			Txt.Border = Value;		// Рамка
			if (Value == true) Txt.BorderColor = 0xFF0000;
		}
//-----------------------------------------------------------------------------------------------------
	}
}