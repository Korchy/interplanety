package Vn.Interface.Button {
//-----------------------------------------------------------------------------------------------------
// Набор кнопок типа состояния. Может быть нажата одна кнопка или не нажата ни одна из набора. Если
// одна кнопка была нажата, при нажатии другой - первая отжимается. При нажатии/отжатии кнопки отправляется
// событие CHANGED
//-----------------------------------------------------------------------------------------------------
	import flash.events.Event;
	import flash.events.MouseEvent;
	import Vn.Interface.Button.ButtonMVn;
	import Vn.Objects.VnObjectR;
//-----------------------------------------------------------------------------------------------------
	public class RadioButtonVn extends VnObjectR {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var lButtons:Array;				// Массив с кнопками
		private var lPressedButton:ButtonMVn;	// Указатель на нажатую кнопку
		// Константы событий
		public static const CHANGED:String = "EvChanged";	// Состояние изменилось
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function RadioButtonVn() {
			// Конструктор предка
			super();
			// Конструктор
			SetLocalPosition(10, 10);	// Размер по умолчанию
			lButtons = new Array();
			lPressedButton = null;
			addEventListener(MouseEvent.CLICK, OnButtonClick);	// Контролируем клик до собственного клика по кнопке
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			lPressedButton = null;
			removeEventListener(MouseEvent.CLICK, OnButtonClick);
			for(var i:uint=0;i<lButtons.length;) {
				if(lButtons[i]!=null&&lButtons[i]!=undefined) {
					removeChild(lButtons[i]);
					lButtons[i]._delete();
				}
				lButtons.splice(i,1);
			}
			lButtons = null;
			// Деструктор предка
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		public function AddButton():ButtonMVn {
			// Добавляет новую кнопку в список, возвращает указатель на нее для кастомизации
			var NewButton:ButtonMVn = new ButtonMVn();
			lButtons.push(NewButton);
			addChild(NewButton);
			return NewButton;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		private function OnButtonClick(e:MouseEvent):void {
			// Клик по одной из кнопок
			if (lPressedButton == e.target) lPressedButton = null;
			else lPressedButton = ButtonMVn(e.target);
			// Отжать все нажатые, кроме текущей
			for (var i:uint = 0; i < lButtons.length; i++) {
				if (lButtons[i] != lPressedButton && lButtons[i].Pressed == true) lButtons[i].Reset();
			}
			// Отправить событие
			dispatchEvent(new Event(RadioButtonVn.CHANGED));
		}
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function get Pressed():int {
			// Индекс нажатой кнопки
			for (var i:uint = 0; i < lButtons.length; i++) {
				if (lButtons[i] == lPressedButton) return i;
			}
			return -1;	// -1 - ничего не нажато
		}
//-----------------------------------------------------------------------------------------------------
	}
}