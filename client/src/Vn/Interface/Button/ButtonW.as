package Vn.Interface.Button {
//-----------------------------------------------------------------------------------------------------
// Класс "Кнопка по нажатию на которую создается и удаляется окно"
//-----------------------------------------------------------------------------------------------------
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.EventPhase;
	import Vn.Interface.Window.VnWindow;
//-----------------------------------------------------------------------------------------------------
	public class ButtonW extends Button {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var lButtonWFunc:ButtonWFuncVn;	// Функционал управления окном
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function ButtonW() {
			// Конструктор родителя
			super();
			// Коструктор
			SetButtonWFunc();
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			if (lButtonWFunc != null) {
				lButtonWFunc._delete();
				lButtonWFunc = null;
			}
			// Деструктор родителя
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		protected function SetButtonWFunc():void {
			// Подключение функционала управления окном
			lButtonWFunc = new ButtonWFuncVn();
			lButtonWFunc.CreateWindowFunction = CreateWindow;
		}
//-----------------------------------------------------------------------------------------------------
		protected function CreateWindow():VnWindow {
			// Создать окно - переопределяется в потомках
			return null;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		override protected function OnClick(e:MouseEvent):void {
			// Нажатие
			if(e.eventPhase==EventPhase.AT_TARGET) {
				lButtonWFunc.OpenCloseWindow();
			}
		}
//-----------------------------------------------------------------------------------------------------
		override protected function OnRemoveFromStage(e:Event):void {
			// При удалении из списка отображения
			// Закрыть подчиненное окно, если оно было открыто
			lButtonWFunc.CloseWindow();
			super.OnRemoveFromStage(e);
		}
//-----------------------------------------------------------------------------------------------------
		override public function Update():void {
			// Обновление
			super.Update();
			lButtonWFunc.Update();
		}
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		override public function set Enabled(Value:Boolean):void {
			if (Value == false) lButtonWFunc.CloseWindow();
			super.Enabled = Value;
		}
//-----------------------------------------------------------------------------------------------------
		override public function set Visible(Value:Boolean):void {
			if (Value == false) lButtonWFunc.CloseWindow();
			super.Visible = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function get WindowShown():Boolean {
			// Окно открыто/закрыто
			return lButtonWFunc.WindowShown;
		}
//-----------------------------------------------------------------------------------------------------
		public function get Window():VnWindow {
			// Указатель на SubWindow
			return lButtonWFunc.Window;
		}
//-----------------------------------------------------------------------------------------------------
		protected function get WindowFunc():ButtonWFuncVn {
			// Указатель на функционал управления окном
			return lButtonWFunc;
		}
//-----------------------------------------------------------------------------------------------------
		protected function set WindowFunc(vValue:ButtonWFuncVn):void {
			// Указатель на функционал управления окном
			lButtonWFunc = vValue;
		}
//-----------------------------------------------------------------------------------------------------
	}
}