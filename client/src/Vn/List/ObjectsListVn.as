package Vn.List {
//-----------------------------------------------------------------------------------------------------
// Список объектов
//-----------------------------------------------------------------------------------------------------
	
//-----------------------------------------------------------------------------------------------------
	public class ObjectsListVn  {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var lObjects:Array;				// Список указателей на объекты
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function ObjectsListVn() {
			// Конструктор предка
//			super();
			// Массив объектов
			lObjects = new Array();
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, Sавтоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		public function _delete():void {
			// Удалить объекты
			Clear();
			lObjects = null;
			// Деструктор предка
//			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		public function Clear():void {
			// Очистка данных в списке
			while (Length > 0) {
				if (lObjects[0] != null && lObjects[0] != undefined) {
					lObjects[0]._delete();
					lObjects.splice(0, 1);
				}
			}
		}
//-----------------------------------------------------------------------------------------------------
		public function Add(NewObject:Object):void {
			// Добавление объекта в список
			// Если объект с таким Id уже есть в списке - заменить (удалить старый - добавить новый)
			Delete(NewObject.Id);
			lObjects.push(NewObject);
		}
//-----------------------------------------------------------------------------------------------------
		public function Delete(Id:uint):void {
			// Удалить объекта из списка по его Id (с удалением самого объекта)
			for (var i:uint = 0; i < Length; i++) {
				if (lObjects[i].Id == Id) {
					lObjects[i]._delete();
					lObjects.splice(i,1);
					break;
				}
			}
		}
//-----------------------------------------------------------------------------------------------------
		public function ById(vId:uint):Object {
			// Возвратить указатель на объект по его Id
			for (var i:uint = 0; i < Length; i++) {
				if(lObjects[i].Id==vId) return lObjects[i];
			}
			return null;
		}
//-----------------------------------------------------------------------------------------------------
		public function KeyById(Id:uint):uint {
			// Возвратить ключ объекта с Id из списка
			for (var i:uint = 0; i < Length; i++) {
				if (All[i].Id == Id) {
					return i;
					break;
				}
			}
			return null;
		}
//-----------------------------------------------------------------------------------------------------
		public function SortById():void {
			// Сортировка списка объектов по их Id
			lObjects.sort(ObjectsListVn.SortByIdCondition);
		}
//-----------------------------------------------------------------------------------------------------
		private static function SortByIdCondition(A:Object,B:Object):Number {
			// Условие сортировки объектов по их Id
			if(A.Id>B.Id) return 1;
			if(A.Id<B.Id) return -1;
			return 0;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function get All():Array {
			return lObjects;	// Указатель на массив объектов
		}
//-----------------------------------------------------------------------------------------------------
		public function get Length():uint {
			return lObjects.length;	// Кол-во объектов
		}
//-----------------------------------------------------------------------------------------------------
	}
}