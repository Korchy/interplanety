package Vn.Ships {
	// Контейнер для управления кораблем
//-----------------------------------------------------------------------------------------------------
	import Vn.Objects.VnObjectS;
	import Vn.Objects.VnObjectU;
	import Vn.Text.TextDictionary;
	import Vn.Interface.Text.VnText;
	import Vn.Ships.Routes.AddRouteButton;
//-----------------------------------------------------------------------------------------------------
	public class ShipManager extends VnObjectU {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		public var Pict:VnObjectS;			// Указатель на пиктограмму корабля
		private var lAddRoute:AddRouteButton;	// Указатель на кнопку "Создать маршрут"
		private var Info:ShipInfoButton;		// Указатель на кнопку "Информация о корабле"
		public var ParentShip:Ship;			// Указатель на корабль
		private var RegNo:VnText;				// Регистрационный номер корабля
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function ShipManager(NewShip:Ship) {
			// Конструктор предка
			super();
			// Конструктор
			ParentShip = NewShip;
			// Картинка 40х40 + кнопка 20x20, промежуток 4 пикс, высота картинка 40х40 плюс надпись 14
			SetLocalPosition(20+2+10,20+7);
			// Пиктограмма
			Pict = new VnObjectS();
			addChild(Pict);
			// Кнопка информации
			Info = new ShipInfoButton(ParentShip);
			addChild(Info);
			Info.MoveIntoParent(54,10,true);
			// Кнопка создания маршрута
			lAddRoute = new AddRouteButton(ParentShip);
			addChild(lAddRoute);
			lAddRoute.MoveIntoParent(54,30,true);
			// Рег. №
			RegNo = new VnText();
			RegNo.Align = VnText.NONE;
			RegNo.y = 40;
			RegNo.width = 68;
			RegNo.height = 14;
			addChild(RegNo);
			// Регистрация событий
			
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			removeChild(Info);
			Info._delete();
			Info = null;
			removeChild(lAddRoute);
			lAddRoute._delete();
			lAddRoute = null;
			removeChild(Pict);
			Pict._delete();
			Pict = null;
			removeChild(RegNo);
			RegNo._delete();
			RegNo = null;
			// Деструктор предка
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		override public function Update():void {
			// Обновление
			// Обновляем только кнопку информации (для проигрыша анимации)
			Info.Update();
			lAddRoute.Update();
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function set RegNumber(Value:uint):void {
			RegNo.FontSize = 10;
			RegNo.Text = TextDictionary.Text(77)+": "+String(Value);
		}
//-----------------------------------------------------------------------------------------------------
		public function get AddRouteBnt():AddRouteButton {
			// Указатель на кнопку добавления маршрута
			return lAddRoute;
		}
//-----------------------------------------------------------------------------------------------------
	}
}