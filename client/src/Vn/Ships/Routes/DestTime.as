package Vn.Ships.Routes {
//-----------------------------------------------------------------------------------------------------
// 	Контейнер планета + время полета до нее
//-----------------------------------------------------------------------------------------------------
	import Vn.Common.SC;
	import Vn.Common.Common;
	import Vn.Math.Vector2;
	import Vn.Interface.Text.VnText;
	import Vn.Objects.VnObjectT;
	import Vn.Ships.Ship;
	import Vn.SpaceObjects.InteractiveSpaceObjectRC;
	import Vn.Objects.VnObjectS;
//	import Vn.Vn;
//-----------------------------------------------------------------------------------------------------
	public class DestTime extends VnObjectT {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var SourceObject:InteractiveSpaceObjectRC;	// Указатель на исходную планету
		public var Pict:VnObjectS;	// Указатель на пиктограмму планеты
		private var l_FlyTime:Number;	// Время полета (сек)
		private var DTime:VnText;		// Время полета в текстовом представлении
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function DestTime() {
			// Конструктор предка
			super();
			// Конструктор
			// Картинка 30 х 30 + текст 10 + стрелка 10 + промежуток 2 пикс
			SetLocalPosition(25,27);
			// Исходный объект
			SourceObject = null;
			// Пиктограмма
			Pict = new VnObjectS();
			addChild(Pict);
			// Время
			l_FlyTime = 0;
			DTime = new VnText();
			DTime.Text = "00:00:00"
			DTime.FontSize = 10;
			addChild(DTime);
			DTime.x = 0;
			DTime.y = 30;
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			removeChild(DTime);
			DTime._delete();
			DTime = null;
			removeChild(Pict);
			Pict._delete();
			Pict = null;
			// Деструктор предка
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		public function CountDestTime(PlanetA:InteractiveSpaceObjectRC, PlanetB:InteractiveSpaceObjectRC, CShip:Ship):void {
			// Подсчет времени перелета корабля CShip от планеты PlanetA до планеты PlanetB
			// Считается так: берем текущее расстояние между планетами. Считаем процентное соотношение его в промежутке от минимального до
			// максимального расстояния между этими планетами (мин и макс расстояния считаются по среднему радиусу, когда планеты рядом и
			// когда они на противополжных сторонах). Берем перелет на мин. расстояние, считаем от него полученный процент. К полному мин.
			// расстоянию добавляем полученное. Итого перелет лежит в пределах: мин. расстояние - 2 мин. расстояния, регулируется в зависимости
			// от текущего расстояния между планетами
			// Расстояние на текущий момент расположения планет
			var Va:Vector2 = PlanetA.CountRealPos();
			var Vb:Vector2 = PlanetB.CountRealPos();
			var Vab:Vector2 = new Vector2();
			Vector2.Vec2Subtract(Va, Vb, Vab);
			var L:Number = Vab.Vec2Length();
			// Максимальное и минимальное расстояния между планетами
			var LMax:Number = PlanetA.CountMROffset() + PlanetB.CountMROffset();
			var LMin:Number = Math.abs(PlanetA.CountMROffset() - PlanetB.CountMROffset());
			// Процентное значение для текущего расстояния отночительно максимального (д.б. всегда >= 1)
			var Proc:Number = L / LMax;
			// Берем мин. расстояние и увеличиваем в соответствии с процентом от максимального
			L = LMin + LMin * Proc;
			l_FlyTime = Math.round(L / CShip.Speed);	// Полное время перелета (сек)
			var H:Number = Math.floor(l_FlyTime/(60*60));	// часов
			var M:Number = Math.floor((l_FlyTime-H*60*60)/60);	// минут
			var S:Number = l_FlyTime - H*60*60 - M*60; 			// секунд
			DTime.Text = Common.LeadingNull(String(H), 2) + ":" + Common.LeadingNull(String(M), 2) + ":" + Common.LeadingNull(String(S), 2);
		}
//-----------------------------------------------------------------------------------------------------
		public static function TimeSort(A:DestTime,B:DestTime):Number {
			// Условие сортировки объектов по времени полета
			if(A.l_FlyTime>B.l_FlyTime) return 1;
			if(A.l_FlyTime<B.l_FlyTime) return -1;
			return 0;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------
		
//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function get SPlanet():InteractiveSpaceObjectRC {
			return SourceObject;
		}
//-----------------------------------------------------------------------------------------------------
		public function set SPlanet(Value:InteractiveSpaceObjectRC):void {
			SourceObject = Value;
		}
//-----------------------------------------------------------------------------------------------------
		public function get FlyTime():Number {
			// Возвращает время полета до текущей планеты в минутах
			return l_FlyTime;
		}
//-----------------------------------------------------------------------------------------------------
	}
}