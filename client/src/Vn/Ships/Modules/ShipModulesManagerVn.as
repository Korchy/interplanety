package Vn.Ships.Modules {
//-----------------------------------------------------------------------------------------------------
// Менеджер модулей корабля
//-----------------------------------------------------------------------------------------------------
	import flash.utils.getDefinitionByName;
	import Vn.Common.DynamicObjectsVn;
	import Vn.List.ObjectsListLVn;
//-----------------------------------------------------------------------------------------------------
	public class ShipModulesManagerVn extends ObjectsListLVn {
//-----------------------------------------------------------------------------------------------------
// Переменные
//-----------------------------------------------------------------------------------------------------
		private var lShipId:uint;	// Id корабля
//-----------------------------------------------------------------------------------------------------
// Конструктор
//-----------------------------------------------------------------------------------------------------
		public function ShipModulesManagerVn() {
			// Конструктор родителя
			super();
			// Конструктор
			Script = "getshipmodules.php";
		}
//-----------------------------------------------------------------------------------------------------
// Деструктор - вызывать самому, автоматически не вызывается
//-----------------------------------------------------------------------------------------------------
		override public function _delete():void {
			// Деструктор
			
			// Деструктор родителя
			super._delete();
		}
//-----------------------------------------------------------------------------------------------------
// Функции
//-----------------------------------------------------------------------------------------------------
		override protected function CreateListFromXML(Data:XML):void {
			// Создание списка по полученным XML-данным
			for each (var Node:XML in Data.*) {
				if (Node.nodeKind() == "element") {
					var ClassReference:Class = getDefinitionByName(DynamicObjectsVn.FullName("ShipModule"+Node.child("type"))) as Class;
					var Instance:ShipModule = new ClassReference();
					Instance.LoadFromXML(Node);
					Add(Instance);
				}
			}
		}
//-----------------------------------------------------------------------------------------------------
		override protected function SetScriptParams():void {
			// Добавление загрузочных параметров в загрузчик
			AddScriptParam("ShipId", String(lShipId));
		}
//-----------------------------------------------------------------------------------------------------
		public function cargoSpace(vModuleType:uint):uint {
			// Возврат объема места под определенный тип груза (определенный тип модуля)
			var cargoSpace:uint = 0;
			for each(var currentModule:ShipModule in All) {
				// Считаем для нужного типа модулей и универсальных
				if (currentModule.Type == vModuleType) cargoSpace += currentModule.Value;
			}
			return cargoSpace;
		}
//-----------------------------------------------------------------------------------------------------
// Обработка событий
//-----------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------
// Методы get/set для установки значений переменных
//-----------------------------------------------------------------------------------------------------
		public function get ShipId():uint {
			return lShipId;
		}
//-----------------------------------------------------------------------------------------------------
		public function set ShipId(Value:uint):void {
			lShipId = Value;
		}
//-----------------------------------------------------------------------------------------------------
	}
}